#include <stdio.h>
#include <stdlib.h>

typedef enum { RED, BLACK } NodeColor;

typedef struct Node {
    int data;
    NodeColor color;
    struct Node *left, *right, *parent;
} Node;

Node *root = NULL;

Node *createNode(int data) {
    Node *newNode = (Node *)malloc(sizeof(Node));
    newNode->data = data;
    newNode->color = RED;
    newNode->left = newNode->right = newNode->parent = NULL;
    return newNode;
}

void rotateLeft(Node *&root, Node *&pt) {
    Node *pt_y = pt->right;
    pt->right = pt_y->left;

    if (pt->right != NULL)
        pt->right->parent = pt;

    pt_y->parent = pt->parent;

    if (pt->parent == NULL)
        root = pt_y;
    else if (pt == pt->parent->left)
        pt->parent->left = pt_y;
    else
        pt->parent->right = pt_y;

    pt_y->left = pt;
    pt->parent = pt_y;
}

void rotateRight(Node *&root, Node *&pt) {
    Node *pt_y = pt->left;
    pt->left = pt_y->right;

    if (pt->left != NULL)
        pt->left->parent = pt;

    pt_y->parent = pt->parent;

    if (pt->parent == NULL)
        root = pt_y;
    else if (pt == pt->parent->left)
        pt->parent->left = pt_y;
    else
        pt->parent->right = pt_y;

    pt_y->right = pt;
    pt->parent = pt_y;
}

void fixViolation(Node *&root, Node *&pt) {
    Node *pt_parent = NULL;
    Node *pt_grandparent = NULL;

    while ((pt != root) && (pt->color == RED) && (pt->parent->color == RED)) {
        pt_parent = pt->parent;
        pt_grandparent = pt->parent->parent;

        if (pt_parent == pt_grandparent->left) {
            Node *pt_uncle = pt_grandparent->right;

            if (pt_uncle != NULL && pt_uncle->color == RED) {
                pt_grandparent->color = RED;
                pt_parent->color = BLACK;
                pt_uncle->color = BLACK;
                pt = pt_grandparent;
            } else {
                if (pt == pt_parent->right) {
                    rotateLeft(root, pt_parent);
                    pt = pt_parent;
                    pt_parent = pt->parent;
                }
                rotateRight(root, pt_grandparent);
                NodeColor temp = pt_parent->color;
                pt_parent->color = pt_grandparent->color;
                pt_grandparent->color = temp;
                pt = pt_parent;
            }
        } else {
            Node *pt_uncle = pt_grandparent->left;

            if ((pt_uncle != NULL) && (pt_uncle->color == RED)) {
                pt_grandparent->color = RED;
                pt_parent->color = BLACK;
                pt_uncle->color = BLACK;
                pt = pt_grandparent;
            } else {
                if (pt == pt_parent->left) {
                    rotateRight(root, pt_parent);
                    pt = pt_parent;
                    pt_parent = pt->parent;
                }
                rotateLeft(root, pt_grandparent);
                NodeColor temp = pt_parent->color;
                pt_parent->color = pt_grandparent->color;
                pt_grandparent->color = temp;
                pt = pt_parent;
            }
        }
    }
    root->color = BLACK;
}

void insert(int data) {
    Node *pt = createNode(data);
    root = bstInsert(root, pt);
    fixViolation(root, pt);
}

Node* bstInsert(Node* root, Node* pt) {
    if (root == NULL)
        return pt;

    if (pt->data < root->data) {
        root->left = bstInsert(root->left, pt);
        root->left->parent = root;
    } else if (pt->data > root->data) {
        root->right = bstInsert(root->right, pt);
        root->right->parent = root;
    }

    return root;
}

void inorderHelper(Node *root) {
    if (root == NULL)
        return;

    inorderHelper(root->left);
    printf("%d ", root->data);
    inorderHelper(root->right);
}

void inorder() {
    inorderHelper(root);
}

int main() {
    insert(7);
    insert(3);
    insert(18);
    insert(10);
    insert(22);
    insert(8);
    insert(11);
    insert(26);

    printf("Inorder Traversal of Created Tree\n");
    inorder();
    return 0;
}
